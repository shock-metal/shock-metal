buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
//        maven {
//            name "Parchment"
//            url "https://maven.parchmentmc.org"
//        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
//        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${mc_version}-${mod_version}"
group = "uk.co.shockwaveinteractive" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "shockmetal"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
	
    mappings channel: 'official', version: "${moj_mappings}"
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'shockmetal'

            mods {
                shockmetal {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'shockmetal'

            mods {
                shockmetal {
                    source sourceSets.main
                }
            }
        }
		

		gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'shockmetal'

            mods {
                shockmetal {
                    source sourceSets.main
                }
            }
        }

        data {
            forceExit = false
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'shockmetal', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                shockmetal {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url 'https://modmaven.dev'
    }
    maven {
        name 'CurseForge'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"
	
	// Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
//    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

//    Tetra
//    runtimeOnly fg.deobf("curse.maven:mgui-351914:${mgui_fileid}")
//    runtimeOnly fg.deobf("curse.maven:tetra-289712:${tetra_fileid}")

//    Thermal Series
    //runtimeOnly fg.deobf("curse.maven:cofh-core-69162:3155824")
    //runtimeOnly fg.deobf("curse.maven:thermal-foundation-222880:3155830")
    //runtimeOnly fg.deobf("curse.maven:thermal-expansion-69163:3155832")
    //runtimeOnly fg.deobf("curse.maven:thermal-locomotion-406959:3155835")

//    Patchouli
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

//    Mekanism
    // If you want to test/use Mekanism & its modules during `runClient` invocation, use the following
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")// core
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:additions")// Mekanism: Additions
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:generators")// Mekanism: Generators
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:tools")// Mekanism: Tools

//    Testing
//    runtimeOnly fg.deobf("curse.maven:advanced-xray-256256:3712732")

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
//    compile files("lib/Mantle-1.16.5-1.6.92.jar")
//    compile files("lib/TConstruct-1.16.5-3.0.3.136.jar")
//    runtimeOnly fg.deobf("slimeknights.mantle:Mantle:${mantle_version}")
//    runtimeOnly fg.deobf("slimeknights.tconstruct:TConstruct:${t_construct_version}")


    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

def version_props = ["version": mod_version, "mc_version": minecraft_version_range, "forge_version": forge_version_range, "loader_version": loader_version_range]

// process mods.toml to inject variables
def modsTomlSpec = copySpec{
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'version': mod_version,
                'loader_version': loader_version_range,
                'mc_version': minecraft_version_range,
                'forge_version': forge_version_range
    }
}
// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
        "$rootDir/out/production/resources", // IDEA
        "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources {
    // ensure directory exists, first build likes to fail
    new File("${processResources.destinationDir}/META-INF").mkdirs()
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${mod_name}",
            "Specification-Vendor": "Shockwave Interactive",
            "Specification-Version": "${mod_version}",
            "Implementation-Title": project.name,
            "Implementation-Version": "${mod_version}",
            "Implementation-Vendor" : "Shockwave Interactive",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
